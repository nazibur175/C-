Step-1:
create a file with the name: ran.bat and write the below code

@echo off
g++ -std=c++17 -o test_gen.exe test_gen.cpp
g++ -std=c++17 -o my_sol.exe my_sol.cpp
g++ -std=c++17 -o brute.exe brute.cpp
for /l %%x in (1, 1, 500) do (
    test_gen > input.in
    my_sol < input.in > wrong_output.out 
    brute < input.in > correct_output.out
    fc wrong_output.out correct_output.out > diagnostics || exit /b
    echo %%x
)
echo all tests passed
pause


Step 2:
Create a file named "brute.cpp" and write your brute-force solution in it.

	int a,b;
	cin>>a>>b;
	cout<<a+b<<endl;

Step 3:
Create a file named "my_sol.cpp" and write the solution you want to test in it.

	int a,b;
	cin>>a>>b;
	if(a==1)a++;
	cout<<a+b<<endl;

Step 4:
Create a file named test_gen.cpp and write the code below with the desired changes.

#include<bits/stdc++.h>
using namespace std;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}


 
// //Random n real numbers between l and r with dig decimal places
// void real(int l, int r, int dig, int n) {
//     for (int i = 0; i < n; ++i)
//     {
//         cout << rand(l,r) <<"."<<rand(0,pow(10,dig)-1)<< " ";
//     }
// }
// // Random n strings of length l
// void str(int l, int n) {
//     for (int i = 0; i < n; ++i)
//     {
//         for(int j = 0; j < l; ++j) {
//             int v = rand(1,150);
//             if(v%3==0) cout<<(char)rand('a','z');
//             else if(v%3==1) cout<<(char)rand('A','Z');
//             else cout<<rand(0,9);
//         }
//         cout<<" ";
//     }
// }
// // Random n strings of max length l
// void strmx(int mxlen, int n) {
//     for (int i = 0; i < n; ++i)
//     {
//         int l = rand(1,mxlen);
//         for(int j = 0; j < l; ++j) {
//             int v = rand(1,150);
//             if(3%3==0) cout<<(char)rand('a','z');
//             else if(v%3==1) cout<<(char)rand('A','Z');
//             else cout<<rand(0,9);
//         }
//         cout<<" ";
//     }
// } 
// // Random tree of n nodes
// void tree(int n) {
//     int prufer[n-2];
//     for ( int i = 0; i < n; i++ ){
//         prufer[i] = rand(1,n);
//     }
//     int m = n-2;
//     int vertices = m + 2; 
//     int vertex_set[vertices]; 
//     for (int i = 0; i < vertices; i++) 
//         vertex_set[i] = 0; 
//     for (int i = 0; i < vertices - 2; i++) 
//         vertex_set[prufer[i] - 1] += 1; 
//     int j = 0; 
//     for (int i = 0; i < vertices - 2; i++) { 
//         for (j = 0; j < vertices; j++) { 
//             if (vertex_set[j] == 0) { 
//                 vertex_set[j] = -1; 
//                 cout << (j + 1) << " "
//                      << prufer[i] << '\n'; 
//                 vertex_set[prufer[i] - 1]--; 
//                 break; 
//             } 
//         } 
//     } 
//     j = 0; 
//     for (int i = 0; i < vertices; i++) { 
//         if (vertex_set[i] == 0 && j == 0) { 
//             cout << (i + 1) << " "; 
//             j++; 
//         } 
//         else if (vertex_set[i] == 0 && j == 1) 
//             cout << (i + 1) << "\n"; 
//     }
// }

// Random n numbers between l and r
void num(int l, int r, int n) {
    for (int i = 0; i < n; ++i)
    {
        cout << rand(l,r) << " ";
    }
}

signed main()
{
    
       int x=rand(1,10);
       int y=rand(1,10);
        
       cout<<x<<" "<<y<<endl;

    
}

Step 5:
Go to your folder and open Command Prompt from there.
Run the file "run.bat"

Step 6:
Open the "diagnostics" file, which will be created automatically.
There, you can see both the correct output and the incorrect output (if any).

Step 7:
Open the "input.in" file to see the input for which your solution produced the wrong output.
